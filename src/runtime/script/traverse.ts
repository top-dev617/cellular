import { Node } from "@babel/core";

type NodeType = Node["type"];

type Visit<Type> = (node: Type) => void;
type VisitNode<Type> = { enter?: Visit<Type>; exit?: Visit<Type> };
type VisitNodeOrProps<Type extends Node> = VisitNode<Type> & { [K in keyof Type]?: VisitNode<Type> };

export type Visitor = {
    [Type in NodeType]?: VisitNodeOrProps<Node & { type: Type }>;
};

/* type VisitAll = {
    [Type in NodeType]: VisitProps<Node & { type: Type }> | null;
};

type VisitProps<SpecificNode> = { [K in Exclude<keyof SpecificNode, keyof Node> as SpecificNode[K] extends (Array<Node | null> | Node | null) ? K : never]: SpecificNode[K] extends Array<Node | null> ? true : false; }; */


const visitProps /* :  VisitAll */ = {
    File: { program: false },
    AnyTypeAnnotation: {},
    ArgumentPlaceholder: {},
    ArrayExpression: { elements: true },
    ArrayPattern: { elements: true },
    ArrayTypeAnnotation: { elementType: false },
    ArrowFunctionExpression: { body: false, params: true, },
    AssignmentExpression: { left: false, right: false },
    AssignmentPattern: { left: false, right: false },
    AwaitExpression: { argument: false },
    BigIntLiteral: {},
    BinaryExpression: { left: false, right: false },
    BindExpression: { callee: false, object: false },
    BlockStatement: { body: true, directives: true },
    BooleanLiteral: {},
    BooleanLiteralTypeAnnotation: {},
    BooleanTypeAnnotation: {},
    BreakStatement: {},
    CallExpression: { arguments: true, callee: false },
    CatchClause: { body: false },
    ClassAccessorProperty: { key: false },
    ClassBody: { body: true },
    ClassDeclaration: { body: false, id: false },
    ClassExpression: { body: false },
    ClassImplements: { id: false },
    ClassMethod: { body: false, key: false, params: true },
    ClassPrivateMethod: { body: false, key: false, params: true },
    ClassPrivateProperty: { key: false },
    ClassProperty: { key: false },
    ConditionalExpression: { alternate: false, consequent: false, test: false },
    ContinueStatement: {},
    DebuggerStatement: {},
    DecimalLiteral: {},
    DeclareClass: { body: false, id: false },
    DeclareExportAllDeclaration: { source: false },
    DeclareExportDeclaration: {},
    DeclareFunction: { id: false },
    DeclareInterface: { body: false, id: false },
    DeclareModule: { body: false, id: false },
    DeclareModuleExports: { typeAnnotation: false },
    DeclareOpaqueType: { id: false },
    DeclareTypeAlias: { id: false, right: false },
    DeclareVariable: { id: false },
    DeclaredPredicate: { value: false },
    Decorator: { expression: false },
    Directive: { value: false },
    DirectiveLiteral: {},
    DoExpression: { body: false },
    DoWhileStatement: { body: false, test: false },
    EmptyStatement: {},
    EmptyTypeAnnotation: {},
    EnumBooleanBody: { members: true },
    EnumBooleanMember: { id: false, init: false },
    EnumDeclaration: { body: false, id: false },
    EnumDefaultedMember: { id: false },
    EnumNumberBody: { members: true },
    EnumNumberMember: { id: false, init: false },
    EnumStringBody: { members: true },
    EnumStringMember: { id: false, init: false },
    EnumSymbolBody: { members: true },
    ExistsTypeAnnotation: {},
    ExportAllDeclaration: { source: false },
    ExportDefaultDeclaration: { declaration: false },
    ExportDefaultSpecifier: { exported: false },
    ExportNamedDeclaration: { specifiers: true },
    ExportNamespaceSpecifier: { exported: false },
    ExportSpecifier: { exported: false, local: false },
    ExpressionStatement: { expression: false },
    ForInStatement: { body: false, left: false, right: false },
    ForOfStatement: { body: false, left: false, right: false },
    ForStatement: { body: false },
    FunctionDeclaration: { body: false, params: true },
    FunctionExpression: { body: false, params: true },
    FunctionTypeAnnotation: { params: true, returnType: false },
    FunctionTypeParam: { typeAnnotation: false },
    GenericTypeAnnotation: { id: false },
    Identifier: {},
    IfStatement: { consequent: false, test: false },
    Import: {},
    ImportAttribute: { key: false, value: false },
    ImportDeclaration: { source: false, specifiers: true },
    ImportDefaultSpecifier: { local: false },
    ImportNamespaceSpecifier: { local: false },
    ImportSpecifier: { imported: false, local: false },
    IndexedAccessType: { indexType: false, objectType: false },
    InferredPredicate: {},
    InterfaceDeclaration: { body: false, id: false },
    InterfaceExtends: { id: false },
    InterfaceTypeAnnotation: { body: false },
    InterpreterDirective: {},
    IntersectionTypeAnnotation: { types: true },
    JSXAttribute: null,
    JSXClosingElement: null,
    JSXClosingFragment: null,
    JSXElement: null,
    JSXEmptyExpression: null,
    JSXExpressionContainer: null,
    JSXFragment: null,
    JSXIdentifier: null,
    JSXMemberExpression: null,
    JSXNamespacedName: null,
    JSXOpeningElement: null,
    JSXOpeningFragment: null,
    JSXSpreadAttribute: null,
    JSXSpreadChild: null,
    JSXText: null,
    LabeledStatement: { body: false, label: false },
    LogicalExpression: { left: false, right: false },
    MemberExpression: { object: false, property: false },
    MetaProperty: { meta: false, property: false },
    MixedTypeAnnotation: {},
    ModuleExpression: { body: false },
    NewExpression: { arguments: true, callee: false },
    Noop: {},
    NullLiteral: {},
    NullLiteralTypeAnnotation: {},
    NullableTypeAnnotation: { typeAnnotation: false },
    NumberLiteral: {},
    NumberLiteralTypeAnnotation: {},
    NumberTypeAnnotation: {},
    NumericLiteral: {},
    ObjectExpression: { properties: true },
    ObjectMethod: { body: false, key: false, params: true },
    ObjectPattern: { properties: true },
    ObjectProperty: { key: false, value: false },
    ObjectTypeAnnotation: { properties: true },
    ObjectTypeCallProperty: { value: false },
    ObjectTypeIndexer: { key: false, value: false },
    ObjectTypeInternalSlot: { id: false, value: false },
    ObjectTypeProperty: { key: false, value: false },
    ObjectTypeSpreadProperty: { argument: false },
    OpaqueType: { id: false, impltype: false },
    OptionalCallExpression: { arguments: true, callee: false},
    OptionalIndexedAccessType: { indexType: false, objectType: false },
    OptionalMemberExpression: { object: false, property: false },
    ParenthesizedExpression: { expression: false },
    PipelineBareFunction: { callee: false },
    PipelinePrimaryTopicReference: {},
    PipelineTopicExpression: { expression: false },
    Placeholder: { name: false },
    PrivateName: { id: false },
    Program: { body: true, directives: true },
    QualifiedTypeIdentifier: { id: false, qualification: false },
    RecordExpression: { properties: true },
    RegExpLiteral: {},
    RegexLiteral: {},
    RestElement: { argument: false },
    RestProperty: { argument: false },
    ReturnStatement: {},
    SequenceExpression: { expressions: true },
    SpreadElement: { argument: false },
    SpreadProperty: { argument: false },
    StaticBlock: { body: true },
    StringLiteral: {},
    StringLiteralTypeAnnotation: {},
    StringTypeAnnotation: {},
    Super: {},
    SwitchCase: { consequent: true },
    SwitchStatement: { cases: true, discriminant: false },
    SymbolTypeAnnotation: {},
    TSAnyKeyword: null,
    TSArrayType: null,
    TSAsExpression: null,
    TSBigIntKeyword: null,
    TSBooleanKeyword: null,
    TSCallSignatureDeclaration: null,
    TSConditionalType: null,
    TSConstructSignatureDeclaration: null,
    TSConstructorType: null,
    TSDeclareFunction: null,
    TSDeclareMethod: null,
    TSEnumDeclaration: null,
    TSEnumMember: null,
    TSExportAssignment: null,
    TSExpressionWithTypeArguments: null,
    TSExternalModuleReference: null,
    TSFunctionType: null,
    TSImportEqualsDeclaration: null,
    TSImportType: null,
    TSIndexSignature: null,
    TSIndexedAccessType: null,
    TSInferType: null,
    TSInstantiationExpression: null,
    TSInterfaceBody: null,
    TSInterfaceDeclaration: null,
    TSIntersectionType: null,
    TSIntrinsicKeyword: null,
    TSLiteralType: null,
    TSMappedType: null,
    TSMethodSignature: null,
    TSModuleBlock: null,
    TSModuleDeclaration: null,
    TSNamedTupleMember: null,
    TSNamespaceExportDeclaration: null,
    TSNeverKeyword: null,
    TSNonNullExpression: null,
    TSNullKeyword: null,
    TSNumberKeyword: null,
    TSObjectKeyword: null,
    TSOptionalType: null,
    TSParameterProperty: null,
    TSParenthesizedType: null,
    TSPropertySignature: null,
    TSQualifiedName: null,
    TSRestType: null,
    TSSatisfiesExpression: null,
    TSStringKeyword: null,
    TSSymbolKeyword: null,
    TSThisType: null,
    TSTupleType: null,
    TSTypeAliasDeclaration: null,
    TSTypeAnnotation: null,
    TSTypeAssertion: null,
    TSTypeLiteral: null,
    TSTypeOperator: null,
    TSTypeParameter: null,
    TSTypeParameterDeclaration: null,
    TSTypeParameterInstantiation: null,
    TSTypePredicate: null,
    TSTypeQuery: null,
    TSTypeReference: null,
    TSUndefinedKeyword: null,
    TSUnionType: null,
    TSUnknownKeyword: null,
    TSVoidKeyword: null,
    TaggedTemplateExpression: { quasi: false, tag: false },
    TemplateElement: {},
    TemplateLiteral: { expressions: true, quasis: true },
    ThisExpression: {},
    ThisTypeAnnotation: {},
    ThrowStatement: { argument: false },
    TopicReference: {},
    TryStatement: { block: false },
    TupleExpression: { elements: true },
    TupleTypeAnnotation: { types: true },
    TypeAlias: { id: false, right: false },
    TypeAnnotation: { typeAnnotation: false },
    TypeCastExpression: { expression: false, typeAnnotation: false },
    TypeParameter: {},
    TypeParameterDeclaration: { params: true },
    TypeParameterInstantiation: { params: true },
    TypeofTypeAnnotation: { argument: false },
    UnaryExpression: { argument: false },
    UnionTypeAnnotation: { types: true },
    UpdateExpression: { argument: false },
    V8IntrinsicIdentifier: null,
    VariableDeclaration: { declarations: true },
    VariableDeclarator: { id: false },
    Variance: {},
    VoidTypeAnnotation: {},
    WhileStatement: { body: false, test: false },
    WithStatement: { body: false, object: false },
    YieldExpression: {}
};

export function visit(node: Node, visitor: Visitor) {
    const handler = visitor[node.type];
    
    (handler as any)?.enter?.(node);
    
    for (const [key, isArray] of Object.entries(visitProps[node.type] ?? {})) {
        (handler as any)?.[key]?.enter?.(node);

        if (isArray) {
            (node as any)[key].forEach((it: Node) => visit(it, visitor));
        } else {
            visit((node as any)[key], visitor);
        }

        (handler as any)?.[key]?.exit?.(node);
    }

    (handler as any)?.exit?.(node);
}

export function isInside() {
    return {
        is: false,
        enter() {
            this.is = true;
        },
        exit() {
            this.is = false;
        }
    };
}